<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>空心菜的BLOG</title>
    <link>https://lzhujian.github.io/</link>
    <description>Recent content on 空心菜的BLOG</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 23 Nov 2019 00:41:18 +0800</lastBuildDate>
    
        <atom:link href="https://lzhujian.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>关于</title>
      <link>https://lzhujian.github.io/about/</link>
      <pubDate>Wed, 30 Jan 2019 00:05:39 +0800</pubDate>
      
      <guid>https://lzhujian.github.io/about/</guid>
      
        <description>

&lt;p&gt;&lt;img src=&#34;https://lzhujian.github.io/image/about-me.png&#34; alt=&#34;about-me.png&#34; /&gt;
我叫李龙，很高兴认识大家，偶尔没心没肺，所以昵称空心菜，个人博客也就是空心菜的Blog。&lt;/p&gt;

&lt;h2 id=&#34;关于我&#34;&gt;关于我&lt;/h2&gt;

&lt;p&gt;我是一名开发工程师，主要工作语言是C++，主要从事于音视频编解码和传输协议的开发，做过客户端的开发，也开发过流媒体服务器。Windows, Mac, iOS, Android, Linux平台的相关开发都有接触，号称全能打杂师。&lt;/p&gt;

&lt;p&gt;2012年武汉理工大学计算机专业本科和硕士毕业，曾经北漂，目前定居武汉。武汉的节奏可能没有背景那么快，也有些时间做做分享，希望能将技术之路走下去，努力工作，好好生活。&lt;/p&gt;

&lt;p&gt;工作之余，爱好打打羽毛球，看看书，跑跑步，游泳，也爱旅游，要带我家宝贝们多去看看这大好世界，哈哈 :)&lt;/p&gt;

&lt;h2 id=&#34;工作经历&#34;&gt;工作经历&lt;/h2&gt;

&lt;p&gt;2012.6 - 2015.7   搜狐视频&lt;/p&gt;

&lt;p&gt;2015.8 - 2017.12  跟谁学&lt;/p&gt;

&lt;p&gt;2019.3 - 至今      金山云&lt;/p&gt;

&lt;h2 id=&#34;关于本站&#34;&gt;关于本站&lt;/h2&gt;

&lt;p&gt;本站主要用于纪录工作中的一些心得，分享自己的一些开发经验，也包括一些读书和生活感悟，希望和大家一起交流。&lt;/p&gt;

&lt;p&gt;本站使用&lt;code&gt;Hugo&lt;/code&gt;生成静态页面，主题使用&lt;code&gt;hugo-theme-jane&lt;/code&gt;，发布于&lt;a href=&#34;https://github.com/lzhujian/lzhujian.github.io&#34;&gt;&lt;code&gt;github&lt;/code&gt;&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;联系我&#34;&gt;联系我&lt;/h2&gt;

&lt;p&gt;email: lzhujian@gmail.com&lt;/p&gt;

&lt;p&gt;wechat: lzhujian&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>打造最强终端之三：vim插件使用教程</title>
      <link>https://lzhujian.github.io/post/3.vim-tutorial/</link>
      <pubDate>Sat, 23 Nov 2019 00:41:18 +0800</pubDate>
      
      <guid>https://lzhujian.github.io/post/3.vim-tutorial/</guid>
      
        <description>

&lt;p&gt;本系列文章包括3篇，主要分享我在后端开发过程中使用终端的一些经验和心得，分享fish shell使用，使用tmux终端复用管理会话、窗口，以及vim插件使用，让vim变成强大的IDE。通过阅读本系列文章，你也可以打造一个高效易用的终端，能很大的提高工作的效率，让手指飞起来，让命令行飞起来。&lt;/p&gt;

&lt;p&gt;本系列的3篇文章包括：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://lzhujian.github.io/post/1.fish-tutorial/&#34;&gt;打造最强终端之一：Fish shell简明教程&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://lzhujian.github.io/post/2.tmux-tutorial/&#34;&gt;打造最强终端之二：Tmux简明教程&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://lzhujian.github.io/post/3.vim-tutorial/&#34;&gt;打造最强终端之三：vim插件使用教程&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;本系列文章使用的fish配置文件，tmux配置文件和vim插件都上传到了github, &lt;a href=&#34;https://github.com/lzhujian/cool-terminal-conf&#34;&gt;cool-terminal-conf&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;本文为第三篇，vim插件使用教程。&lt;/p&gt;

&lt;h1 id=&#34;exvim&#34;&gt;exVim&lt;/h1&gt;

&lt;p&gt;exVim将vim打造成一个友好编程环境的项目，exVim引入vim中(.exvim)项目文件的概念。通过Vim编辑此项目文件（.exvim），将调用exVim插件。这样，您可以应用不同的Vim设置，插件设置，甚至可以根据不同项目的需要加载插件。通常，它使Vim成为世界上最好的IDE！&lt;/p&gt;

&lt;h2 id=&#34;入门&#34;&gt;入门&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;vim udp.exvim&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;生成的.exvim工程，窗口左边为 project window，右边为 edit window，edit window可以配置目录过滤规则(folder_filter_mode)，过滤目录(folder_filter)，过滤文件(file_filter)等，在project window执行&amp;lt;leader&amp;gt;R命令生成目录树&lt;strong&gt;(&amp;lt;leader&amp;gt;R指的是按下&amp;rsquo;\&amp;lsquo;，紧接着按下&amp;rsquo;R&amp;rsquo;，vim操作都是大小写敏感)&lt;/strong&gt;，然后执行 &lt;code&gt;:Up&lt;/code&gt;更新工程。&lt;/p&gt;

&lt;p&gt;生成的工程结构如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lzhujian.github.io/image/terminal-tutorial/image-20191118142838343.png&#34; alt=&#34;image-20191118142838343&#34; /&gt;&lt;/p&gt;

&lt;p&gt;本节涉及的使用命令有&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-note&#34; data-lang=&#34;note&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-note&#34; data-lang=&#34;note&#34;&gt;&amp;lt;leader&amp;gt;R   生成左边project windows所示的工程
&amp;lt;leader&amp;gt;r 刷新工程目录
:Up Update工程，exvim将使用ctag，id-utils，cscope等插件解析工程，这样就能在工程中实现查找、函数跳转等功能&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;工程窗口&#34;&gt;工程窗口&lt;/h2&gt;

&lt;p&gt;光标的移动与vim相同，使用 &lt;code&gt;h j k l&lt;/code&gt; 分别对应光标的 &lt;code&gt;左移 上移 下移 右移&lt;/code&gt; ，同时exvim提供 &lt;code&gt;ctrl-j&lt;/code&gt; 和 &lt;code&gt;ctrl-k&lt;/code&gt;用于文件夹之间的光标移动&lt;/p&gt;

&lt;p&gt;将光标移动到文件上，按下&lt;code&gt;enter&lt;/code&gt;将打开文件&lt;/p&gt;

&lt;p&gt;将光标移动到文件夹上，安装&lt;code&gt;enter&lt;/code&gt;将折叠/展开目录，同时exvim也提供了 &lt;code&gt;zo&lt;/code&gt; 和 &lt;code&gt;zc&lt;/code&gt; 分别用于目录的折叠和展开&lt;/p&gt;

&lt;p&gt;在目录下使用&lt;code&gt;o&lt;/code&gt;新建一行，输入文件名，&lt;code&gt;enter&lt;/code&gt;编辑文件后&lt;code&gt;:w&lt;/code&gt;保存，将新建一个文件&lt;/p&gt;

&lt;p&gt;将光标移动到目录上，按下&lt;code&gt;O&lt;/code&gt;，将在该目录下新建一个文件夹，exvim提示你输入文件夹名&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tips:&lt;/strong&gt; 想快速定位到当前正在编辑的文件，按下 &lt;code&gt;&amp;lt;leader&amp;gt;fc&lt;/code&gt; 将会回到project window并将光标定位到正在编辑的文件，如果不小心关闭了project window这招也很实用。&lt;/p&gt;

&lt;h2 id=&#34;搜索&#34;&gt;搜索&lt;/h2&gt;

&lt;p&gt;vim使用 /&lt;word&gt; 搜索文本，如果是搜索一个单词，exvim提供一种更加快捷方便的方式，将光标置于要搜索的单词上，按下 &lt;code&gt;gd&lt;/code&gt; 即可搜索改单词。&lt;/p&gt;

&lt;p&gt;同时exvim提供全局搜索，使用ex-gsearch进行文本搜索，支持两种方式：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;leader&amp;gt;gg&lt;/code&gt;：搜索光标下的单词&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:GS &amp;lt;word&amp;gt;&lt;/code&gt;：搜索&lt;word&gt;和包含&lt;word&gt;的文本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:GSW &amp;lt;word&amp;gt;&lt;/code&gt;：搜索完整的&lt;word&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;搜索完成后将在&lt;code&gt;全局搜索窗口&lt;/code&gt;显示搜索结果，如下图所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lzhujian.github.io/image/terminal-tutorial/image-20191118164436055.png&#34; alt=&#34;image-20191118164436055&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;过滤搜索结果&#34;&gt;过滤搜索结果&lt;/h2&gt;

&lt;p&gt;上图是我们全局搜索session的结果，包含session, Seesion, new_session等包含session文本的结果，那如何对搜索结果进行进一步过滤呢，比如过滤出Session的结果。具体操作：在搜索结果窗口搜索 &lt;code&gt;/\&amp;lt;Session\&amp;gt;&lt;/code&gt;，该命令表示搜索完整的Session单词，然后按下&lt;code&gt;&amp;lt;leader&amp;gt;r&lt;/code&gt;对搜索结果进行过滤，这样，搜索窗口就只包含匹配&lt;Session&gt;单词的结果了，如下图所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lzhujian.github.io/image/terminal-tutorial/image-20191118164614961.png&#34; alt=&#34;image-20191118164614961&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;问题:&lt;/strong&gt; 当我们使用 :GS 搜索文本 tcp::socket时，发现没有输出结果，而我们确定代码中肯定包含 tcp::socket 文本，这是因为ex-gsearch仅支持 &lt;word&gt;，所以包含&lt;code&gt;: , 空格&lt;/code&gt; 的关键字无法搜索到。解决办法就只能分两步：首先搜索一个单词，然后在搜索结果窗口中过滤搜索结果，将完整的 搜索词 过滤出来&lt;/p&gt;

&lt;h2 id=&#34;符号列表&#34;&gt;符号列表&lt;/h2&gt;

&lt;p&gt;前面我们使用&lt;code&gt;:Up&lt;/code&gt;命令，exvim使用ctag, id-utils等插件生成标签符号，ex-symbols提供几种方法在符号窗口列出符号&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-note&#34; data-lang=&#34;note&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-note&#34; data-lang=&#34;note&#34;&gt;&amp;lt;leader&amp;gt;ss 列出所有符号
&amp;lt;leader&amp;gt;sg 列出光标下单词的符号
&amp;lt;leader&amp;gt;sq 打开符号窗口，显示为最后一次的symbols列表
:SL &amp;lt;your-tag&amp;gt; 使用&amp;lt;your-tag&amp;gt;作为搜索tag，列出所有匹配项&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;下图为光标在UDPTransport下， &lt;leader&gt;sg 展示的 symbols窗口&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lzhujian.github.io/image/terminal-tutorial/image-20191118170453627.png&#34; alt=&#34;image-20191118170453627&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;其他插件&#34;&gt;其他插件&lt;/h1&gt;

&lt;h2 id=&#34;ctrlp&#34;&gt;ctrlp&lt;/h2&gt;

&lt;p&gt;ctrlp用于快速打开文件，按下&lt;code&gt;ctrl-p&lt;/code&gt;，然后输入要匹配的文件名，&lt;code&gt;ctrl-j ctrl-k&lt;/code&gt;上下移动光标，选择要打开的文件&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lzhujian.github.io/image/terminal-tutorial/image-20191118172121262.png&#34; alt=&#34;image-20191118172121262&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;tabbar&#34;&gt;TabBar&lt;/h2&gt;

&lt;p&gt;TabBar插件使vim打开的文件在顶部以tab的形式展示，如下图所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lzhujian.github.io/image/terminal-tutorial/image-20191118172332182.png&#34; alt=&#34;image-20191118172332182&#34; /&gt;&lt;/p&gt;

&lt;p&gt;我修改了一些快捷方式：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ctrl-h  上一个tab
ctrl-l  下一个tab
ctrl-x  关闭tab&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;a-vim&#34;&gt;a.vim&lt;/h2&gt;

&lt;p&gt;a.vim主要用于头文件和源文件之间的快速跳转，比如正在编辑tcp.h，按下 &lt;code&gt;:A&lt;/code&gt; 即可快速打开 tcp.cpp&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lzhujian.github.io/image/terminal-tutorial/image-20191118172829173.png&#34; alt=&#34;image-20191118172829173&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;nerdtree&#34;&gt;NERDTree&lt;/h2&gt;

&lt;p&gt;NERDTree用于文件浏览，在展示当前目录下的所有文件，快捷方式我设置的为 &lt;code&gt;ctrl-n&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lzhujian.github.io/image/terminal-tutorial/image-20191118173210971.png&#34; alt=&#34;image-20191118173210971&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;总结&#34;&gt;总结&lt;/h1&gt;

&lt;p&gt;上面列出的插件是我使用vim过程中使用最频繁的，掌握了大大的提高开发效率，当然还有些其他的插件，如indentLine, undotree等，读者可以根据实际使用中慢慢掌握，vim学习难度比较高，但是掌握后，开发效率能很大的提升。&lt;/p&gt;

&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://exvim.github.io/&#34;&gt;exvim&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>打造最强终端之二：Tmux简明教程</title>
      <link>https://lzhujian.github.io/post/2.tmux-tutorial/</link>
      <pubDate>Sat, 23 Nov 2019 00:08:07 +0800</pubDate>
      
      <guid>https://lzhujian.github.io/post/2.tmux-tutorial/</guid>
      
        <description>

&lt;p&gt;本系列文章包括3篇，主要分享我在后端开发过程中使用终端的一些经验和心得，分享fish shell使用，使用tmux终端复用管理会话、窗口，以及vim插件使用，让vim变成强大的IDE。通过阅读本系列文章，你也可以打造一个高效易用的终端，能很大的提高工作的效率，让手指飞起来，让命令行飞起来。&lt;/p&gt;

&lt;p&gt;本系列的3篇文章包括：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://lzhujian.github.io/post/1.fish-tutorial/&#34;&gt;打造最强终端之一：Fish shell简明教程&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://lzhujian.github.io/post/2.tmux-tutorial/&#34;&gt;打造最强终端之二：Tmux简明教程&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://lzhujian.github.io/post/3.vim-tutorial/&#34;&gt;打造最强终端之三：vim插件使用教程&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;本系列文章使用的fish配置文件，tmux配置文件和vim插件都上传到了github, &lt;a href=&#34;https://github.com/lzhujian/cool-terminal-conf&#34;&gt;cool-terminal-conf&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;本文为第二篇，Tmux简明教程。&lt;/p&gt;

&lt;h1 id=&#34;简介&#34;&gt;简介&lt;/h1&gt;

&lt;p&gt;命令行的典型使用方式是，打开一个终端窗口（terminal window），在里面输入命令。用户与计算机的这种交互，称为一次“会话“（session）。&lt;/p&gt;

&lt;p&gt;会话的一个重要特点是，窗口与其启动的进程是连在一起的。打开窗口，会话开始；关闭窗口，会话结束。这样会话中的进程也会随之关闭，不管有没有运行完。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;tmux&lt;/strong&gt;就是将会话与窗口”解绑“的工具。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;它允许在单个窗口中，同时访问多个会话。这对于同时运行多个命令行程序很有用。&lt;/li&gt;
&lt;li&gt;它可以让新窗口&amp;rdquo;接入&amp;rdquo;已经存在的会话。&lt;/li&gt;
&lt;li&gt;它允许每个会话有多个连接窗口，因此可以多人实时共享会话。&lt;/li&gt;
&lt;li&gt;它还支持窗口任意的垂直和水平拆分。&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;配置&#34;&gt;配置&lt;/h1&gt;

&lt;p&gt;tmux配置文件为 &lt;code&gt;~/.tmux.conf&lt;/code&gt;，我自定义了tmux的快捷键和状态栏，配置项我都写了注释，读者可以根据自己的喜好修改自定义 :)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;62
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;63
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;64
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;65
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;66
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;67
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;68
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;69
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;70
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;71
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;72
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;73
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;74
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;75
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;76
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;77
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;78
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;79
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;80
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;81
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;82
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;83
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;84
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;85
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;86
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;87
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;# tmux默认快捷键的前缀是 ctrl-b, 我修改成了 ` (数字键1左边的那个键)
# Set Ctrl-b key bindings
unbind C-b
set -g prefix `

# 窗口索引从1开始，`-1 即切换到第一个窗口
# Count sessions start at 1
set -g base-index 1

# vi模式，v开始选择，y 复制选择内容到剪贴板
# Use vim bindings
setw -g mode-keys vi
# start selecting text typing &amp;#39;v&amp;#39; key (once you are in copy mode)
bind-key -T copy-mode-vi &amp;#39;v&amp;#39; send -X begin-selection
# # copy selected text to the system&amp;#39;s clipboard
bind-key -T copy-mode-vi &amp;#39;y&amp;#39; send -X copy-pipe-and-cancel pbcopy

#up
bind-key k select-pane -U
#down
bind-key j select-pane -D
#left
bind-key h select-pane -L
#right
bind-key l select-pane -R

# 切分窗口，快捷键修改为 - 水平切分窗口， \ 垂直切分窗口
# split window
unbind &amp;#39;&amp;#34;&amp;#39;
bind - splitw -v
unbind %
bind \ splitw -h

# ctrl + k/j/h/l 调整pane大小
# resize pane
bind -r ^k resizep -U 10 # upward (prefix Ctrl+k)
bind -r ^j resizep -D 10 # downward (prefix Ctrl+j)
bind -r ^h resizep -L 10 # to the left (prefix Ctrl+h)
bind -r ^l resizep -R 10 # to the right (prefix Ctrl+l)

# Status bar settings
# alignment
set-option -g status-justify centre

# left-bottom corner
set-option -g status-left &amp;#39;#[bg=black,fg=green][#[fg=cyan]#S#[fg=green]]&amp;#39;
set-option -g status-left-length 20

# window list
set-window-option -g window-status-format &amp;#39;#[dim]#I:#[default]#W#[fg=grey,dim]&amp;#39;
set-window-option -g window-status-current-format &amp;#39;#[fg=cyan,bold]#I#[fg=blue]:#[fg=cyan]#W#[fg=dim]&amp;#39;

# right-bottom status
set -g status-right &amp;#39;#[fg=green][#[fg=cyan]%Y-%m-%d#[fg=green]]&amp;#39;

# center window status
set -g window-status-format &amp;#34;#I:#W&amp;#34;
set -g window-status-current-format &amp;#34;#I:#W&amp;#34;

# default statusbar colors
set -g status-fg white
set -g status-bg black

# default window title colors
set-window-option -g window-status-style fg=white
set-window-option -g window-status-style bg=default
set-window-option -g window-status-style dim

# active window title colors
set-window-option -ag window-status-current-style fg=red
set-window-option -ag window-status-current-style bg=default
set-window-option -ag window-status-current-style bold

# command/message line colors
set -g message-style fg=white
set -g message-style bg=black
set -g message-style bright

set -g status-keys vi
bind-key -T vi-edit Up send -X history-up
bind-key -T vi-edit Down send -X history-down

set -g status-interval 1
set -g status-justify centre # center align window list

# window-name
set-option -g allow-rename off&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;使用&#34;&gt;使用&lt;/h1&gt;

&lt;p&gt;下面操作的快捷键 &lt;prefix&gt;指的是快捷键的前缀，默认是&lt;code&gt;ctrl-b&lt;/code&gt;，我配置文件修改为了 `(键盘数字1左边的键)&lt;/p&gt;

&lt;h2 id=&#34;基本操作&#34;&gt;基本操作&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;tmux ls  &lt;span class=&#34;c1&#34;&gt;# 查询所有会话&lt;/span&gt;
tmux new -s session_name    &lt;span class=&#34;c1&#34;&gt;# 创建会话&lt;/span&gt;
tmux detach &lt;span class=&#34;c1&#34;&gt;# 断开会话，或者使用快捷键 &amp;lt;prefix&amp;gt;-d&lt;/span&gt;
tmux attach &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-t session_name&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;# 重新连接会话，-t session_name 指定连接的会话名称&lt;/span&gt;
tmux kill-session -t session_name   &lt;span class=&#34;c1&#34;&gt;# 关闭会话，会话关闭后，会话中所有的程序也会关闭&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;会话-session-管理&#34;&gt;会话(session)管理&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;s   &lt;span class=&#34;c1&#34;&gt;# 列出所有会话&lt;/span&gt;
$   &lt;span class=&#34;c1&#34;&gt;# 重命名会话&lt;/span&gt;
d   &lt;span class=&#34;c1&#34;&gt;# 断开会话&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;下图展示&lt;code&gt;&amp;lt;prefix&amp;gt;-s&lt;/code&gt;列出所有session的结果，我们只窗口了一个blog会话，选择session时，也会展示该session中各窗口的缩略图。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lzhujian.github.io/image/terminal-tutorial/image-20191123002755193.png&#34; alt=&#34;image-20191123002755193&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;窗口-window-管理&#34;&gt;窗口(window)管理&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;c &lt;span class=&#34;c1&#34;&gt;# 新建窗口&lt;/span&gt;
, &lt;span class=&#34;c1&#34;&gt;# 重命名窗口&lt;/span&gt;
w   &lt;span class=&#34;c1&#34;&gt;# 列出所有窗口&lt;/span&gt;
n &lt;span class=&#34;c1&#34;&gt;# 选择下一个窗口&lt;/span&gt;
p &lt;span class=&#34;c1&#34;&gt;# 选择上一个窗口&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;-9 &lt;span class=&#34;c1&#34;&gt;# 选择对应编号的窗口&lt;/span&gt;

- &lt;span class=&#34;c1&#34;&gt;# 水平分割窗口，默认键为 %&lt;/span&gt;
&lt;span class=&#34;se&#34;&gt;\ &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 垂直分割窗口，默认键为 &amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;下图展示&lt;code&gt;&amp;lt;prefix&amp;gt;-w&lt;/code&gt;列出所有窗口的结果，可以看到blog会话包含了hugo, post, udp 3个窗口，选择某个窗口时也展示了该窗口包含的pane。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lzhujian.github.io/image/terminal-tutorial/image-20191123002526507.png&#34; alt=&#34;image-20191123002526507&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;窗格-pane-管理&#34;&gt;窗格(pane)管理&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;q &lt;span class=&#34;c1&#34;&gt;# 显示窗格的编号&lt;/span&gt;
o &lt;span class=&#34;c1&#34;&gt;# 在窗格间切换&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 与下一个窗格交换位置&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 与上一个窗格交换位置&lt;/span&gt;
x &lt;span class=&#34;c1&#34;&gt;# 关闭当前窗格&lt;/span&gt;

- &lt;span class=&#34;c1&#34;&gt;# 创建一个水平窗格，默认键为 %&lt;/span&gt;
&lt;span class=&#34;se&#34;&gt;\ &lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 创建一个竖直窗格，默认键为 &amp;#34;&lt;/span&gt;
j &lt;span class=&#34;c1&#34;&gt;# 选择下一个窗格&lt;/span&gt;
k &lt;span class=&#34;c1&#34;&gt;# 选择上一个窗格&lt;/span&gt;
h &lt;span class=&#34;c1&#34;&gt;# 选择左一个窗格&lt;/span&gt;
l &lt;span class=&#34;c1&#34;&gt;# 选择右一个窗格&lt;/span&gt;
ctrl-j  &lt;span class=&#34;c1&#34;&gt;# 向下resize窗格&lt;/span&gt;
ctrl-k  &lt;span class=&#34;c1&#34;&gt;# 向上resize窗格&lt;/span&gt;
ctrl-h  &lt;span class=&#34;c1&#34;&gt;# 向左resize窗格&lt;/span&gt;
ctrl-l  &lt;span class=&#34;c1&#34;&gt;# 向右resize窗格&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;下图展示&lt;code&gt;&amp;lt;prefix&amp;gt;-q&lt;/code&gt;显示pane的编号，可以看到窗口3(udp)包含了 0 1 2 三个pane，&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lzhujian.github.io/image/terminal-tutorial/tmux-pane-shot.png&#34; alt=&#34;tmux-pane-shot&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;其他命令&#34;&gt;其他命令&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 列出所有快捷键，及其对应的 Tmux 命令&lt;/span&gt;
tmux list-keys

&lt;span class=&#34;c1&#34;&gt;# 列出所有 Tmux 命令及其参数&lt;/span&gt;
tmux list-commands

&lt;span class=&#34;c1&#34;&gt;# 列出当前所有 Tmux 会话的信息&lt;/span&gt;
tmux info

&lt;span class=&#34;c1&#34;&gt;# 重新加载当前的 Tmux 配置&lt;/span&gt;
tmux source-file ~/.tmux.conf&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;总结&#34;&gt;总结&lt;/h1&gt;

&lt;p&gt;tmux终端复用的好处不仅在于将窗口与会话&amp;rdquo;解绑&amp;rdquo;，这样即使你不小心关掉了终端，终端中正在运行的程序不会退出，你仍然可以使用 &lt;code&gt;tmux attach&lt;/code&gt;切换到会话中来，同时，一个session可以管理多个窗口和窗格，窗口之间能快速切换，能很大的提高工作效率。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>打造最强终端之一：Fish shell简明教程</title>
      <link>https://lzhujian.github.io/post/1.fish-tutorial/</link>
      <pubDate>Wed, 31 Jul 2019 00:01:24 +0800</pubDate>
      
      <guid>https://lzhujian.github.io/post/1.fish-tutorial/</guid>
      
        <description>

&lt;p&gt;本系列文章包括3篇，主要分享我在后端开发过程中使用终端的一些经验和心得，分享fish shell使用，使用tmux终端复用管理会话、窗口，以及vim插件使用，让vim变成强大的IDE。通过阅读本系列文章，你也可以打造一个高效易用的终端，能很大的提高工作的效率，让手指飞起来，让命令行飞起来。&lt;/p&gt;

&lt;p&gt;本系列的3篇文章包括：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://lzhujian.github.io/post/1.fish-tutorial/&#34;&gt;打造最强终端之一：Fish shell简明教程&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://lzhujian.github.io/post/2.tmux-tutorial/&#34;&gt;打造最强终端之二：Tmux简明教程&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://lzhujian.github.io/post/3.vim-tutorial/&#34;&gt;打造最强终端之三：vim插件使用教程&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;本系列文章使用的fish配置文件，tmux配置文件和vim插件都上传到了github, &lt;a href=&#34;https://github.com/lzhujian/cool-terminal-conf&#34;&gt;cool-terminal-conf&lt;/a&gt;，打造的终端效果图如下图：
&lt;img src=&#34;https://lzhujian.github.io/image/terminal-tutorial/image-20191123134730562.png&#34; alt=&#34;image-20191123134730562&#34; /&gt;
图中显示当前为tutorial会话(session)，src窗口(window)，窗口左边窗格(pane)用vim编辑代码，右上窗格运行的top命令查看程序内存，右下窗格可以输入其他命令行。&lt;/p&gt;

&lt;p&gt;本文为第一篇，Fish shell简明教程。&lt;/p&gt;

&lt;h1 id=&#34;简介&#34;&gt;简介&lt;/h1&gt;

&lt;p&gt;Fish是“the &lt;strong&gt;f&lt;/strong&gt;riendly &lt;strong&gt;i&lt;/strong&gt;nteractive &lt;strong&gt;sh&lt;/strong&gt;ell”的简称，fish最大的特点就是功能强大，智能并且用户友好。Fish支持语法高亮，自动建议，标签完成等，而且配置十分简单。&lt;/p&gt;

&lt;h1 id=&#34;安装&#34;&gt;安装&lt;/h1&gt;

&lt;p&gt;ubuntu用户通过apt-get安装，mac用户可以使用brew安装&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# for ubuntu user&lt;/span&gt;
sudo apt-get install -y fish

&lt;span class=&#34;c1&#34;&gt;# for mac user&lt;/span&gt;
brew install fish&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;配置&#34;&gt;配置&lt;/h1&gt;

&lt;p&gt;修改fish为默认终端&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;chsh -s /usr/bin/fish
fish&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;fish的配置文件是&lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;，每次fish运行都会加载这个配置文件。我们可以在里面添加自定义函数，同时，fish还提供了一个Web界面配置该文件。&lt;code&gt;fish_config&lt;/code&gt;执行后浏览器会打开本机的8000端口，用户可以在网页上配置fish。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;fish_config&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;https://lzhujian.github.io/image/terminal-tutorial/image-20191122233340969.png&#34; alt=&#34;image-20191122233340969&#34; /&gt;&lt;/p&gt;

&lt;p&gt;fish_prompt配置文件是&lt;code&gt;~/.config/fish/functions/fish_prompt.fish&lt;/code&gt;，我的prompt配置了用户名，当前目录，git分支，git状态，suffix，可以修改&lt;code&gt;fish_prompt.fish&lt;/code&gt;自定义你的终端prompt。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lzhujian.github.io/image/terminal-tutorial/image-20191122234150816.png&#34; alt=&#34;image-20191122234150816&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;oh-my-fish&#34;&gt;oh-my-fish&lt;/h1&gt;

&lt;p&gt;oh-my-fish是Fish的主题和插件管理工具(类似oh-my-zsh)，安装非常简单&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Installation&lt;/span&gt;
curl -L https://get.oh-my.fish &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; fish&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;安装完成后，使用&lt;code&gt;omf&lt;/code&gt;命令安装theme或plugin&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;omf --help &lt;span class=&#34;c1&#34;&gt;# 获取 help 信息&lt;/span&gt;
omf theme  &lt;span class=&#34;c1&#34;&gt;# 列出可用的主题&lt;/span&gt;
omf list &lt;span class=&#34;c1&#34;&gt;# 列出已安装的theme和plugin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;使用&lt;code&gt;omf search&lt;/code&gt;查找plugins或者themes，然后使用&lt;code&gt;omf install&lt;/code&gt;安装packages&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;omf search autojump
omf install z
&lt;span class=&#34;c1&#34;&gt;# omf也可以指定url安装package&lt;/span&gt;
omf install https://github.com/jhillyerd/plugin-git &lt;span class=&#34;c1&#34;&gt;# 安装git plugin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;https://lzhujian.github.io/image/terminal-tutorial/image-20191122232530058.png&#34; alt=&#34;image-20191122232530058&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;使用&#34;&gt;使用&lt;/h1&gt;

&lt;p&gt;fish支持&lt;strong&gt;语法高亮&lt;/strong&gt;，非法的命令显示默认的红色，命令有效后变成另外颜色。有效的路径用下划线标识&lt;/p&gt;

&lt;p&gt;fish支持&lt;strong&gt;自动补全&lt;/strong&gt;，输入命令时，在光标右侧显示建议(灰色)，使用&lt;code&gt;ctrl+f&lt;/code&gt;或者&lt;code&gt;→(键盘右键)&lt;/code&gt;接受建议，&lt;code&gt;alt+→&lt;/code&gt;接受部分建议&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lzhujian.github.io/image/terminal-tutorial/image-20191122232932728.png&#34; alt=&#34;image-20191122232932728&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;

&lt;p&gt;Fish官方的 &lt;a href=&#34;https://fishshell.com/docs/current/tutorial.html&#34;&gt;Fish tutorial&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;阮一峰的教程 &lt;a href=&#34;http://www.ruanyifeng.com/blog/2017/05/fish_shell.html&#34;&gt;Fish shell入门教程&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;oh-my-fish &lt;a href=&#34;https://github.com/oh-my-fish/oh-my-fish&#34;&gt;oh-my-fish&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;fish git plugin &lt;a href=&#34;https://github.com/jhillyerd/plugin-git&#34;&gt;plugin-git&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>基于facenet实现人脸识别-2</title>
      <link>https://lzhujian.github.io/post/real-time-face-recognition/</link>
      <pubDate>Thu, 14 Feb 2019 15:56:04 +0800</pubDate>
      
      <guid>https://lzhujian.github.io/post/real-time-face-recognition/</guid>
      
        <description>

&lt;p&gt;上一篇文章中搭建了facenet人脸识别环境，并且运行compare.py比较两张人脸的欧氏距离，本文介绍实时人脸识别的方法。首先收集需要识别的人脸，然后通过opencv读取摄像头数据，计算两张人脸的欧式距离。&lt;/p&gt;

&lt;h3 id=&#34;收集人脸&#34;&gt;收集人脸&lt;/h3&gt;

&lt;p&gt;通过手机或者摄像头拍摄人像照片，要求一张照片只有一张脸，最好正面照，然后通过mtcnn识别人脸并将人脸裁剪出来。数据集的格式参照lfw，即文件夹名为人名(label)，文件夹包含该label的人脸&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;$ ls data/faces
Huang_Zhen/  Li_Long/  Zhang_Wenjie/
# mtcnn performs face alignment and stores face thumbnails 
$ python src/align/align_dataset_mtcnn.py --image_size 160 --margin 32 data/faces data/faces_160
# 将 data/faces_160 目录下保存的人脸拷贝到 data/input_faces目录
$ ls data/input_faces/
Huang_Zhen.png  Li_Long.png  Zhang_Wenjie.png&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;读取摄像头&#34;&gt;读取摄像头&lt;/h3&gt;

&lt;p&gt;使用python-opencv读取摄像头frame&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;# open local camera
capture = cv2.VideoCapture(0)

while True:
    ret, frame = capture.read()
    if not ret:
    	break
    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;计算人脸向量&#34;&gt;计算人脸向量&lt;/h3&gt;

&lt;p&gt;输入人脸的路径，返回该人脸的向量embedding&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;def generate_image_embedding(self, images):
    # Get input and output tensors
    images_placeholder = tf.get_default_graph().get_tensor_by_name(&amp;#34;input:0&amp;#34;)
    embeddings = tf.get_default_graph().get_tensor_by_name(&amp;#34;embeddings:0&amp;#34;)
    phase_train_placeholder = tf.get_default_graph().get_tensor_by_name(&amp;#34;phase_train:0&amp;#34;)

    stack_images = np.stack(images)
    feed_dict = {images_placeholder: stack_images,
                 phase_train_placeholder: False}
    return self.sess.run(embeddings, feed_dict=feed_dict)&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;计算欧式距离&#34;&gt;计算欧式距离&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;def compare(self, face, compare_emb, face_labels):
    dist_list = []
    for i in range(len(compare_emb)):
        dist = np.sqrt(np.sum(np.square(np.subtract(face.embedding, compare_emb[i, :]))))
        dist_list.append(dist)
    min_dist = min(dist_list)
    index = dist_list.index(min_dist)
    return face_labels[index]&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>基于facenet实现人脸识别-1</title>
      <link>https://lzhujian.github.io/post/face-recognition-with-facenet/</link>
      <pubDate>Thu, 31 Jan 2019 14:41:16 +0800</pubDate>
      
      <guid>https://lzhujian.github.io/post/face-recognition-with-facenet/</guid>
      
        <description>

&lt;p&gt;人脸识别是计算视觉和人工智能的一个热点领域，目前实现人脸识别的方法和框架有很多，比如face++, OpenFace, FaceNet等。本系列文章一共有三篇，介绍使用人脸检测的深度学习模型&lt;code&gt;MTCNN&lt;/code&gt;和人脸识别的深度学习模型&lt;code&gt;FaceNet&lt;/code&gt;实现人脸识别。本文为系列文章的第一篇，主要介绍facenet环境的安装和验证。&lt;/p&gt;

&lt;h2 id=&#34;准备&#34;&gt;准备&lt;/h2&gt;

&lt;p&gt;本文演示的环境为Windows 10 + python3.5&lt;/p&gt;

&lt;p&gt;下载安装 &lt;a href=&#34;https://repo.continuum.io/archive/Anaconda3-2018.12-Windows-x86_64.exe&#34;&gt;Anaconda3&lt;/a&gt;，新建一个tensorflow的environment，然后打开终端，克隆facenet并安装tensorflow, scipy等libraries&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git clone https://github.com/davidsandberg/facenet.git
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; facenet
pip install -r requirements.txt&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;下载model&#34;&gt;下载model&lt;/h2&gt;

&lt;p&gt;facnet提供了 Pre-trained models，在lfw验证的正确率达到99%以上，如果需要训练自己的模型，可以参考&lt;a href=&#34;https://github.com/davidsandberg/facenet/wiki/Classifier-training-of-inception-resnet-v1&#34;&gt;facenet wiki&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;模型的下载需要翻墙，我已经保存到百度云了，读者可以自行下载。链接：&lt;a href=&#34;https://pan.baidu.com/s/1wm8TOYtSMzXqllo8UX-l0Q&#34;&gt;https://pan.baidu.com/s/1wm8TOYtSMzXqllo8UX-l0Q&lt;/a&gt;
提取码：2ika。&lt;/p&gt;

&lt;h2 id=&#34;验证&#34;&gt;验证&lt;/h2&gt;

&lt;p&gt;使用src/compare.py对比两张照片人脸的欧式距离&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;python src\compare.py models\20180402-114759 data\images\Anthony_Hopkins_0001.jpg data\images\Anthony_Hopkins_0002.jpg&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;输出结果如下：
&lt;img src=&#34;https://lzhujian.github.io/image/facenet-compare-result.png&#34; alt=&#34;facenet-compare-result&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;本文在win10环境下安装Anaconda3，并使用Anaconda3安装tensorflow及scipy等其他依赖库，最后运行src/compare.py验证运行环境正常。下一篇文章将介绍SVM人脸类聚。&lt;/p&gt;

&lt;p&gt;欢迎交流： lzhujian@gmail.com&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>欢迎</title>
      <link>https://lzhujian.github.io/post/welcome/</link>
      <pubDate>Wed, 30 Jan 2019 00:24:09 +0800</pubDate>
      
      <guid>https://lzhujian.github.io/post/welcome/</guid>
      
        <description>&lt;p&gt;欢迎来到空心菜的BLOG。&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>