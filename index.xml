<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>空心菜的BLOG</title>
    <link>https://lzhujian.github.io/</link>
    <description>Recent content on 空心菜的BLOG</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 14 Feb 2019 15:56:04 +0800</lastBuildDate>
    
        <atom:link href="https://lzhujian.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>关于</title>
      <link>https://lzhujian.github.io/about/</link>
      <pubDate>Wed, 30 Jan 2019 00:05:39 +0800</pubDate>
      
      <guid>https://lzhujian.github.io/about/</guid>
      
        <description>

&lt;h2 id=&#34;关于我&#34;&gt;关于我&lt;/h2&gt;

&lt;p&gt;我叫李龙，是一名C++开发工程师，主要从事于音视频编解码和传输协议的开发，Python和Go打杂师。&lt;/p&gt;

&lt;p&gt;2012年计算机专业硕士毕业，曾经北漂，目前定居武汉。身上没有牛逼哄哄的Tags，希望能将技术之路走下去，努力工作，好好生活。&lt;/p&gt;

&lt;p&gt;工作之余，爱好打打羽毛球，看看书，跑跑步，当然很多时候在带娃，哈哈 :)&lt;/p&gt;

&lt;h2 id=&#34;关于本站&#34;&gt;关于本站&lt;/h2&gt;

&lt;p&gt;本站主要用于纪录工作中的一些心得，也包括一些读书和生活感悟。&lt;/p&gt;

&lt;p&gt;本站使用&lt;code&gt;Hugo&lt;/code&gt;生成静态页面，主题使用&lt;code&gt;hugo-theme-jane&lt;/code&gt;，发布于&lt;a href=&#34;https://github.com/lzhujian/lzhujian.github.io&#34;&gt;&lt;code&gt;github&lt;/code&gt;&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;联系我&#34;&gt;联系我&lt;/h2&gt;

&lt;p&gt;email: lzhujian@gmail.com&lt;/p&gt;

&lt;p&gt;wechat: lzhujian&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>基于facenet实现人脸识别-2</title>
      <link>https://lzhujian.github.io/post/real-time-face-recognition/</link>
      <pubDate>Thu, 14 Feb 2019 15:56:04 +0800</pubDate>
      
      <guid>https://lzhujian.github.io/post/real-time-face-recognition/</guid>
      
        <description>

&lt;p&gt;上一篇文章中搭建了facenet人脸识别环境，并且运行compare.py比较两张人脸的欧氏距离，本文介绍实时人脸识别的方法。首先收集需要识别的人脸，然后通过opencv读取摄像头数据，计算两张人脸的欧式距离。&lt;/p&gt;

&lt;h3 id=&#34;收集人脸&#34;&gt;收集人脸&lt;/h3&gt;

&lt;p&gt;通过手机或者摄像头拍摄人像照片，要求一张照片只有一张脸，最好正面照，然后通过mtcnn识别人脸并将人脸裁剪出来。数据集的格式参照lfw，即文件夹名为人名(label)，文件夹包含该label的人脸&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;$ ls data/faces
Huang_Zhen/  Li_Long/  Zhang_Wenjie/
# mtcnn performs face alignment and stores face thumbnails 
$ python src/align/align_dataset_mtcnn.py --image_size 160 --margin 32 data/faces data/faces_160
# 将 data/faces_160 目录下保存的人脸拷贝到 data/input_faces目录
$ ls data/input_faces/
Huang_Zhen.png  Li_Long.png  Zhang_Wenjie.png&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;读取摄像头&#34;&gt;读取摄像头&lt;/h3&gt;

&lt;p&gt;使用python-opencv读取摄像头frame&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;# open local camera
capture = cv2.VideoCapture(0)

while True:
    ret, frame = capture.read()
    if not ret:
    	break
    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;计算人脸向量&#34;&gt;计算人脸向量&lt;/h3&gt;

&lt;p&gt;输入人脸的路径，返回该人脸的向量embedding&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;def generate_image_embedding(self, images):
    # Get input and output tensors
    images_placeholder = tf.get_default_graph().get_tensor_by_name(&amp;#34;input:0&amp;#34;)
    embeddings = tf.get_default_graph().get_tensor_by_name(&amp;#34;embeddings:0&amp;#34;)
    phase_train_placeholder = tf.get_default_graph().get_tensor_by_name(&amp;#34;phase_train:0&amp;#34;)

    stack_images = np.stack(images)
    feed_dict = {images_placeholder: stack_images,
                 phase_train_placeholder: False}
    return self.sess.run(embeddings, feed_dict=feed_dict)&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;计算欧式距离&#34;&gt;计算欧式距离&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;def compare(self, face, compare_emb, face_labels):
    dist_list = []
    for i in range(len(compare_emb)):
        dist = np.sqrt(np.sum(np.square(np.subtract(face.embedding, compare_emb[i, :]))))
        dist_list.append(dist)
    min_dist = min(dist_list)
    index = dist_list.index(min_dist)
    return face_labels[index]&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>基于facenet实现人脸识别-1</title>
      <link>https://lzhujian.github.io/post/face-recognition-with-facenet/</link>
      <pubDate>Thu, 31 Jan 2019 14:41:16 +0800</pubDate>
      
      <guid>https://lzhujian.github.io/post/face-recognition-with-facenet/</guid>
      
        <description>

&lt;p&gt;人脸识别是计算视觉和人工智能的一个热点领域，目前实现人脸识别的方法和框架有很多，比如face++, OpenFace, FaceNet等。本系列文章一共有两篇，介绍使用人脸检测的深度学习模型&lt;code&gt;MTCNN&lt;/code&gt;和人脸识别的深度学习模型&lt;code&gt;FaceNet&lt;/code&gt;实现人脸识别。本文为系列文章的第一篇，主要介绍facenet环境的安装和验证。&lt;/p&gt;

&lt;h2 id=&#34;准备&#34;&gt;准备&lt;/h2&gt;

&lt;p&gt;本文演示的环境为Windows 10 + python3.5&lt;/p&gt;

&lt;p&gt;下载安装 &lt;a href=&#34;https://repo.continuum.io/archive/Anaconda3-2018.12-Windows-x86_64.exe&#34;&gt;Anaconda3&lt;/a&gt;，新建一个tensorflow的environment，然后打开终端，克隆facenet并安装tensorflow, scipy等libraries&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git clone https://github.com/davidsandberg/facenet.git
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; facenet
pip install -r requirements.txt&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;下载model&#34;&gt;下载model&lt;/h2&gt;

&lt;p&gt;facnet提供了 Pre-trained models，在lfw验证的正确率达到99%以上，如果需要训练自己的模型，可以参考&lt;a href=&#34;https://github.com/davidsandberg/facenet/wiki/Classifier-training-of-inception-resnet-v1&#34;&gt;facenet wiki&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;模型的下载需要翻墙，我已经保存到百度云了，读者可以自行下载。链接：&lt;a href=&#34;https://pan.baidu.com/s/1wm8TOYtSMzXqllo8UX-l0Q&#34;&gt;https://pan.baidu.com/s/1wm8TOYtSMzXqllo8UX-l0Q&lt;/a&gt;
提取码：2ika。&lt;/p&gt;

&lt;h2 id=&#34;验证&#34;&gt;验证&lt;/h2&gt;

&lt;p&gt;使用src/compare.py对比两张照片人脸的欧式距离&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;python src\compare.py models\20180402-114759 data\images\Anthony_Hopkins_0001.jpg data\images\Anthony_Hopkins_0002.jpg&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;输出结果如下：
&lt;img src=&#34;https://lzhujian.github.io/image/facenet-compare-result.png&#34; alt=&#34;facenet-compare-result&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;本文在win10环境下安装Anaconda3，并使用Anaconda3安装tensorflow及scipy等其他依赖库，最后运行src/compare.py验证运行环境正常。下一篇文章将介绍SVM人脸类聚。&lt;/p&gt;

&lt;p&gt;欢迎交流： lzhujian@gmail.com&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>欢迎</title>
      <link>https://lzhujian.github.io/post/welcome/</link>
      <pubDate>Wed, 30 Jan 2019 00:24:09 +0800</pubDate>
      
      <guid>https://lzhujian.github.io/post/welcome/</guid>
      
        <description>&lt;p&gt;欢迎来到空心菜的BLOG。&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>